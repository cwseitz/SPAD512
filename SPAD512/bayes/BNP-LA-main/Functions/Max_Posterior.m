function[Data] = Max_Posterior(...
    ...
Data   , lambda     , PI              , S        , ...
time_t , sqrt2sigma , t_p             , sigma_pp , ...
T_max  , T_min      , erftmin_efttmax , i        )
  
  

  constt=(sigma_pp./lambda(S));
  
  
 
  Data.max_post(i) = sum(-(time_t./lambda(S)) +...
         log((erf((constt+t_p)/sqrt2sigma)-erf((constt-time_t)/sqrt2sigma))./lambda(S)+eps)...
        -log(exp(-constt./(2*lambda(S))).*erftmin_efttmax + ...
         exp(-(T_min-t_p)./lambda(S)).*( erfc((constt-(T_min-t_p))/sqrt2sigma)-erfc((constt+t_p)/sqrt2sigma) +eps)+...
         exp(-(T_max-t_p)./lambda(S)).*(-erfc((constt-(T_max-t_p))/sqrt2sigma)+erfc((constt+t_p)/sqrt2sigma) +eps) +eps) +...
         log(PI(S))) +...
         ...
         gammaln(sum(Data.PI_alpha.*Data.PI_beta))-log(sum(gamma(Data.PI_alpha*Data.PI_beta)))...
         +sum((Data.PI_alpha.*Data.PI_beta-1).*log(PI+eps)+...
         ...
         -Data.alpha_lambda*log(Data.beta_lambda)-gammaln(Data.alpha_lambda)+...
             (Data.alpha_lambda-1)*log(lambda)-lambda./Data.beta_lambda);
       
     if  Data.max_post(i)>Data.max_post(i-1)
         
         Data.max_lambda = lambda   ;
         Data.max_S      = S        ;
         Data.max_PI     = PI       ;
     end
end
    